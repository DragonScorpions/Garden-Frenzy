package Main;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author extre
 */
public class UITile extends javax.swing.JPanel {

    /**
     * Creates new form UITile
     */
    private Tile tile;
    private String seedToPlant = "Harvest";
    
    public UITile() {
        setTile(tile);
        initComponents(); //auto-generated, dont mess with me
    }
    
    //Init function that initializes the tile to be empty
    public void setTile(Tile tile)
    {
        this.tile = new Tile();
    }

    //Changes the seed that will be planted when this tile is clicked
    public void prepareNewSeed(String seed)
    {
        //seedToPlant = seed;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CenterLabel = new javax.swing.JLabel();
        CButton = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(75, 75));
        setMinimumSize(new java.awt.Dimension(75, 75));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(75, 75));

        CenterLabel.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        CenterLabel.setText("jLabel1");
        CenterLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CenterLabelMouseClicked(evt);
            }
        });

        CButton.setText("Click me!");
        CButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CenterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(CenterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CButton)
                .addContainerGap(8, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void CButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CButtonActionPerformed
        CenterLabel.setText(
                "<html>" + 
                tile.currentSeed + "<br/>" +
                String.valueOf(tile.getEnabled()) + "<br/>"+
                String.valueOf(tile.getGrowthStage()) + "<br/>"+
                String.valueOf(tile.getTimeSinceGrowth()) + "</html>");
                
    }//GEN-LAST:event_CButtonActionPerformed

    
    //When the text is clicked, do what?
    private void CenterLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CenterLabelMouseClicked

       PlantSeed();
    }//GEN-LAST:event_CenterLabelMouseClicked

    //Set the newest current seed
    //TODO: check that another seed isn't already taking up space
    private void PlantSeed()
    {
        
        if(!GlobalState.SelectedSeed.equals("Harvest"))
        {
            System.out.println("UITile: " + GlobalState.SelectedSeed + " planted!");
            tile.currentSeed = GlobalState.SelectedSeed;
        }
        else
            HarvestSeed();
    }
    
    //Harvest the current seed of the tile
    //TODO: get worth of seed and add to player wallet
    private void HarvestSeed()
    {
        System.out.println("UITile: " + tile.currentSeed + " would be harvested");
        tile.currentSeed = "None";
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CButton;
    private javax.swing.JLabel CenterLabel;
    // End of variables declaration//GEN-END:variables
}
